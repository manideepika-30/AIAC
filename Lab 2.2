{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMm5UDcKep/BEMLiLIy0UN5",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/manideepika-30/AIAC/blob/main/Lab%202.2\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "task0 Write a python program to check whether the given number is prime or not"
      ],
      "metadata": {
        "id": "QxRU96t1RzJJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def is_prime(num):\n",
        "    \"\"\"Checks if a number is prime.\"\"\"\n",
        "    if num <= 1:\n",
        "        return False\n",
        "    for i in range(2, int(num**0.5) + 1):\n",
        "        if num % i == 0:\n",
        "            return False\n",
        "    return True\n",
        "\n",
        "# Get input from the user\n",
        "try:\n",
        "    number = int(input(\"Enter a number: \"))\n",
        "    if is_prime(number):\n",
        "        print(f\"{number} is a prime number.\")\n",
        "    else:\n",
        "        print(f\"{number} is not a prime number.\")\n",
        "except ValueError:\n",
        "    print(\"Invalid input. Please enter an integer.\")"
      ],
      "metadata": {
        "id": "PokbHiXdS1YD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "This code defines a function is_prime that checks if a given number is prime. It first handles edge cases (numbers less than or equal to 1 are not prime). Then, it iterates from 2 up to the square root of the number. If any number in this range divides the input number evenly, the number is not prime and the function returns False. If the loop completes without finding a divisor, the number is prime and the function returns True.\n",
        "\n",
        "The code then prompts the user to enter an integer, calls the is_prime function with the user's input, and prints whether the number is prime or not. It also includes error handling for non-integer input."
      ],
      "metadata": {
        "id": "XXbnFR0UVPLj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "write a function that filters out all negative numbers from a given list."
      ],
      "metadata": {
        "id": "qRUk-c2KeCt3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "d496eb14"
      },
      "source": [
        "def filter_negative_numbers(input_list):\n",
        "  \"\"\"Filters out all negative numbers from a given list.\"\"\"\n",
        "  return [num for num in input_list if num >= 0]\n",
        "\n",
        "# Example usage:\n",
        "my_list = [1, -2, 3, -4, 5, -6, 7]\n",
        "filtered_list = filter_negative_numbers(my_list)\n",
        "print(f\"Original list: {my_list}\")\n",
        "print(f\"Filtered list (non-negative numbers): {filtered_list}\")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "This code defines a function called filter_negative_numbers that takes a list as input. It uses a list comprehension to create a new list containing only the numbers from the input list that are greater than or equal to zero (i.e., non-negative numbers). The original list is then printed, followed by the new list with the negative numbers removed.\n",
        "\n"
      ],
      "metadata": {
        "id": "Sl-7GZa_etyb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "generate code that reads a text file and counts the frequency of each word. Then ask it to explain the code."
      ],
      "metadata": {
        "id": "tHn1MYwJewRF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3e034ac1"
      },
      "source": [
        "from collections import Counter\n",
        "import re\n",
        "\n",
        "def count_word_frequency(file_path):\n",
        "    \"\"\"Reads a text file and counts the frequency of each word.\"\"\"\n",
        "    try:\n",
        "        with open(file_path, 'r', encoding='utf-8') as file:\n",
        "            text = file.read().lower()\n",
        "            # Remove punctuation and split into words\n",
        "            words = re.findall(r'\\b\\w+\\b', text)\n",
        "            word_counts = Counter(words)\n",
        "            return word_counts\n",
        "    except FileNotFoundError:\n",
        "        return f\"Error: File not found at {file_path}\"\n",
        "    except Exception as e:\n",
        "        return f\"An error occurred: {e}\"\n",
        "\n",
        "# Example usage:\n",
        "# Create a dummy text file for demonstration\n",
        "with open(\"sample_text.txt\", \"w\", encoding='utf-8') as f:\n",
        "    f.write(\"This is a sample text file. This file is for demonstrating word frequency count.\")\n",
        "\n",
        "file_path = \"sample_text.txt\"\n",
        "word_frequencies = count_word_frequency(file_path)\n",
        "\n",
        "if isinstance(word_frequencies, dict):\n",
        "    print(f\"Word frequencies in '{file_path}':\")\n",
        "    for word, count in word_frequencies.most_common():\n",
        "        print(f\"{word}: {count}\")\n",
        "else:\n",
        "    print(word_frequencies)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "This code defines a function count_word_frequency that takes a file path as input and counts the frequency of each word in the file.\n",
        "\n",
        "Here's a breakdown:\n",
        "\n",
        "Import necessary libraries: It imports Counter from the collections module for efficient counting and re for regular expressions.\n",
        "Define the function: The count_word_frequency function opens the specified file, reads its content, and converts it to lowercase.\n",
        "Extract words: It uses a regular expression r'\\b\\w+\\b' to find all word boundaries (\\b) and extract sequences of word characters (\\w+). This effectively filters out punctuation.\n",
        "Count word frequencies: The Counter object is used to count the occurrences of each word in the extracted list.\n",
        "Error handling: It includes try...except blocks to handle FileNotFoundError and other potential exceptions during file processing.\n",
        "Example Usage: The code then demonstrates how to use the function by creating a dummy text file named \"sample_text.txt\", calling the count_word_frequency function with the file path, and printing the word frequencies.\n"
      ],
      "metadata": {
        "id": "jXiOeZ8bgXs_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "generate a Python class called Book with attributes title, author, and a method summary() that prints the details."
      ],
      "metadata": {
        "id": "5EP_cVYcfIsj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3d3f54f9"
      },
      "source": [
        "class Book:\n",
        "    \"\"\"Represents a book with title and author.\"\"\"\n",
        "    def __init__(self, title, author):\n",
        "        self.title = title\n",
        "        self.author = author\n",
        "\n",
        "    def summary(self):\n",
        "        \"\"\"Prints the title and author of the book.\"\"\"\n",
        "        print(f\"Title: {self.title}\")\n",
        "        print(f\"Author: {self.author}\")\n",
        "\n",
        "# Example usage:\n",
        "my_book = Book(\"The Hitchhiker's Guide to the Galaxy\", \"Douglas Adams\")\n",
        "my_book.summary()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "This code defines a Python class named Book.\n",
        "\n",
        "Here's a breakdown:\n",
        "\n",
        "class Book:: This line defines a new class named Book. Classes are blueprints for creating objects (instances).\n",
        "__init__(self, title, author):: This is the constructor method. It's called automatically when you create a new Book object.\n",
        "self refers to the instance of the class being created.\n",
        "title and author are parameters that you pass when creating a Book object (e.g., Book(\"My Title\", \"My Author\")).\n",
        "Inside the constructor, self.title = title and self.author = author assign the provided title and author values to the title and author attributes of the Book instance.\n",
        "summary(self):: This is a method of the Book class.\n",
        "self again refers to the instance of the class.\n",
        "This method prints the title and author attributes of the specific Book instance it's called on.\n",
        "Example Usage:\n",
        "my_book = Book(\"The Hitchhiker's Guide to the Galaxy\", \"Douglas Adams\") creates an instance of the Book class named my_book with the given title and author.\n",
        "my_book.summary() calls the summary() method on the my_book instance, which will print the details of that specific book.\n"
      ],
      "metadata": {
        "id": "fb6_DCNkfcw9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "write a program that checks whether a number is an Armstrong number, and then modify it using Cursor AI to improve performance or structure."
      ],
      "metadata": {
        "id": "kDIjPvTLfk9f"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "95f32f5c"
      },
      "source": [
        "def is_armstrong_number(num):\n",
        "    \"\"\"Checks if a number is an Armstrong number.\"\"\"\n",
        "    # Convert number to string to easily access digits\n",
        "    num_str = str(num)\n",
        "    num_digits = len(num_str)\n",
        "    sum_of_powers = 0\n",
        "    for digit in num_str:\n",
        "        sum_of_powers += int(digit) ** num_digits\n",
        "    return sum_of_powers == num\n",
        "\n",
        "# Get input from the user\n",
        "try:\n",
        "    number = int(input(\"Enter a number: \"))\n",
        "    if is_armstrong_number(number):\n",
        "        print(f\"{number} is an Armstrong number.\")\n",
        "    else:\n",
        "        print(f\"{number} is not an Armstrong number.\")\n",
        "except ValueError:\n",
        "    print(\"Invalid input. Please enter an integer.\")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "This code defines a function is_armstrong_number that checks if a number is an Armstrong number.\n",
        "\n",
        "Here's how it works:\n",
        "\n",
        "Convert to string: The number is converted to a string (num_str) to easily determine the number of digits and access each digit individually.\n",
        "Get number of digits: The number of digits (num_digits) is determined by the length of the string.\n",
        "Calculate sum of powers: It initializes sum_of_powers to 0 and then iterates through each digit in the num_str. For each digit, it converts the digit back to an integer and raises it to the power of num_digits, adding the result to sum_of_powers.\n",
        "Check if Armstrong number: Finally, it compares the calculated sum_of_powers with the original number (num). If they are equal, the function returns True, indicating it's an Armstrong number; otherwise, it returns False.\n",
        "Get input and print result: The code then prompts the user to enter an integer, calls the is_armstrong_number function, and prints whether the entered number is an Armstrong number or not. It also includes error handling for non-integer input.\n"
      ],
      "metadata": {
        "id": "QIdHJF8xfxqj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "generate code for sorting a list of dictionaries by a specific key (e.g., age)."
      ],
      "metadata": {
        "id": "Ot75HeLEf1ua"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fdb2d7aa"
      },
      "source": [
        "def sort_list_of_dicts(list_of_dicts, key_to_sort_by):\n",
        "  \"\"\"Sorts a list of dictionaries by a specific key.\"\"\"\n",
        "  return sorted(list_of_dicts, key=lambda x: x[key_to_sort_by])\n",
        "\n",
        "# Example usage:\n",
        "people = [\n",
        "    {\"name\": \"Alice\", \"age\": 30},\n",
        "    {\"name\": \"Bob\", \"age\": 25},\n",
        "    {\"name\": \"Charlie\", \"age\": 35},\n",
        "    {\"name\": \"David\", \"age\": 25},\n",
        "]\n",
        "\n",
        "sorted_people = sort_list_of_dicts(people, \"age\")\n",
        "print(\"Sorted by age:\")\n",
        "print(sorted_people)\n",
        "\n",
        "sorted_people_by_name = sort_list_of_dicts(people, \"name\")\n",
        "print(\"\\nSorted by name:\")\n",
        "print(sorted_people_by_name)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "This code defines a function called sort_list_of_dicts that takes a list of dictionaries and a key as input, and returns a new list of dictionaries sorted by the values associated with that key.\n",
        "\n",
        "Here's a breakdown:\n",
        "\n",
        "def sort_list_of_dicts(list_of_dicts, key_to_sort_by):: Defines the function that accepts the list of dictionaries and the key name to sort by.\n",
        "return sorted(list_of_dicts, key=lambda x: x[key_to_sort_by]): This is the core of the sorting.\n",
        "sorted() is a built-in Python function that returns a new sorted list.\n",
        "list_of_dicts is the list being sorted.\n",
        "key=lambda x: x[key_to_sort_by] specifies the sorting key. lambda x: x[key_to_sort_by] is a small anonymous function that takes a dictionary x from the list and returns the value associated with the key_to_sort_by. The sorted() function uses these values to determine the order of the dictionaries in the list.\n",
        "The example usage demonstrates how to use the function to sort the people list by \"age\" and then by \"name\".\n",
        "\n"
      ],
      "metadata": {
        "id": "jhyuxcvJgMlD"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "ji6UD62egFjA"
      }
    }
  ]
}